package ms2709.kafka.content_indexing_worker

import inspectedpost.model.InspectedPost
import ms2709.kafka.adapter.kafka.common.OperationTypes
import ms2709.kafka.adapter.kafka.common.Topic
import ms2709.kafka.adapter.kafka.inspected_post.InspectedPostMessage
import ms2709.kafka.common.CustomObjectMapper
import ms2709.kafka.post_search_usecase.PostIndexingUseCase
import org.apache.kafka.clients.consumer.ConsumerRecord
import org.springframework.kafka.annotation.KafkaListener
import org.springframework.kafka.support.Acknowledgment
import org.springframework.stereotype.Component
import java.time.LocalDateTime

@Component
class ContentIndexingWorker (
    private val postIndexingUseCase: PostIndexingUseCase
){
    private val objectMapper = CustomObjectMapper()

    @KafkaListener(topics = [Topic.INSPECTED_POST], groupId = "indexing-post-consumer-group", concurrency = "3")
    fun listen(consumedMessage: ConsumerRecord<String, String>, acknowledgment: Acknowledgment) {
        val message = objectMapper.readValue(consumedMessage.value(), InspectedPostMessage::class.java)
        when(message.operationType){
            OperationTypes.CREATE ->{
                handleCreate(message)
                acknowledgment.acknowledge()
            }
            OperationTypes.DELETE ->{
                handleDelete(message)
                acknowledgment.acknowledge()
            }
            OperationTypes.UPDATE->{
                handleUpdate(message)
            }
            else -> throw IllegalArgumentException("Unknown operation type")
        }
    }

    private fun handleUpdate(message: InspectedPostMessage) {
        postIndexingUseCase.save(message.toModel())
    }

    private fun handleDelete(message: InspectedPostMessage) {
        postIndexingUseCase.delete(message.id!!)
    }

    private fun handleCreate(message: InspectedPostMessage) {
        postIndexingUseCase.save(message.toModel())
    }

    private fun InspectedPostMessage.toModel(): InspectedPost {
        return InspectedPost(
            post = this.payLoad?.post ?: throw IllegalStateException("No post"),
            categoryName = this.payLoad?.categoryName ?: throw IllegalStateException("No category name"),
            autoGeneratedTags = this.payLoad?.autoGeneratedTags ?: emptyList()
        )
    }
}