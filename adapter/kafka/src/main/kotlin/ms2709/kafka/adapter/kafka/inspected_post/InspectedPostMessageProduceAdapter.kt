package ms2709.kafka.adapter.kafka.inspected_post

import com.fasterxml.jackson.core.JsonProcessingException
import ms2709.kafka.inspectedpost.model.InspectedPost
import ms2709.kafka.adapter.kafka.common.OperationTypes
import ms2709.kafka.adapter.kafka.common.Topic.INSPECTED_POST
import ms2709.kafka.common.CustomObjectMapper
import ms2709.kafka.common.LogDelegate
import ms2709.kafka.usecase.core.port.inspectedpost.InspectedPostMessageProducePort
import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component

@Component
class InspectedPostMessageProduceAdapter (
    private val kafkaTemplate: KafkaTemplate<String, String>
): InspectedPostMessageProducePort {

    private val log by LogDelegate()
    private val objectMapper = CustomObjectMapper()

    override fun sendCreateMessage(inspectedPost: InspectedPost) {
        InspectedPostMessage().apply {
            this.id = inspectedPost.post.id!!
            this.payLoad = InspectedPostMessage.Payload().apply {
                post = inspectedPost.post
                categoryName = inspectedPost.categoryName
                autoGeneratedTags = inspectedPost.autoGeneratedTags.toMutableList()
                inspectedAt = inspectedPost.inspectedAt
            }
            this.operationType = OperationTypes.CREATE
        }.run {
            sendMessage(this)
        }
    }

    override fun sendUpdateMessage(inspectedPost: InspectedPost) {
        InspectedPostMessage().apply {
            this.id = inspectedPost.post.id!!
            this.payLoad = InspectedPostMessage.Payload().apply {
                post = inspectedPost.post
                categoryName = inspectedPost.categoryName
                autoGeneratedTags = inspectedPost.autoGeneratedTags.toMutableList()
                inspectedAt = inspectedPost.inspectedAt
            }
            this.operationType = OperationTypes.UPDATE
        }.run {
            sendMessage(this)
        }

    }

    override fun sendDeleteMessage(id: Long) {
        InspectedPostMessage().apply {
            this.id = id
            this.payLoad = null
            this.operationType = OperationTypes.DELETE
        }.run {
            sendMessage(this)
        }
    }


    private fun sendMessage(message: InspectedPostMessage) {
        try {
            log.info("[${INSPECTED_POST}] product message -> {}", message)
            kafkaTemplate.send(INSPECTED_POST, message.id.toString(), objectMapper.writeValueAsString(message))
        } catch (e: JsonProcessingException) {
            throw RuntimeException(e)
        }
    }
}