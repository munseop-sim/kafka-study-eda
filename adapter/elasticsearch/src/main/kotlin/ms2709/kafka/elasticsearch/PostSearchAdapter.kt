package ms2709.kafka.elasticsearch

import ms2709.kafka.inspectedpost.model.InspectedPost
import ms2709.kafka.usecase.core.port.post.PostSearchPort
import org.springframework.data.domain.PageRequest
import org.springframework.data.elasticsearch.core.ElasticsearchOperations
import org.springframework.data.elasticsearch.core.query.Criteria
import org.springframework.data.elasticsearch.core.query.CriteriaQuery
import org.springframework.data.elasticsearch.core.query.Query
import org.springframework.stereotype.Component
import java.time.LocalDateTime

@Component
class PostSearchAdapter (
    private val postDocumentRepository:PostDocumentRepository,
    private val elasticsearchOperations: ElasticsearchOperations
): PostSearchPort{


    override fun indexPost(post: InspectedPost) {
        post.toDocument().run {
            postDocumentRepository.save(this)
        }
    }

    override fun deletePost(id: Long) {
        postDocumentRepository.deleteById(id)
    }

    override fun searchPostIdsByKeyword(keyword: String, pageIndex: Int, pageSize: Int): List<Long> {
        if(keyword.isBlank()){
            return emptyList()
        }
        val query = run{
            Criteria("title").contains(keyword)
                .or(Criteria("content").contains(keyword))
                .or(Criteria("categoryName").`is`(keyword))
                .or(Criteria("tags").`is`(keyword))
                .run {
                    CriteriaQuery(this)
                        .setPageable<Query>(PageRequest.of(pageIndex, pageSize))
                }
        }

        val search = elasticsearchOperations.search(query, PostDocument::class.java)
        return search.searchHits.mapNotNull { it.content.id}
    }

    private fun InspectedPost.toDocument():PostDocument{
        val that = this
        return PostDocument().apply {
            this.id = that.post.id
            this.title = that.post.title
            this.content = that.post.content
            this.tags = that.autoGeneratedTags
            this.categoryName = that.categoryName
            this.indexedAt = LocalDateTime.now()
        }
    }
}